#!/usr/bin/env python

import argparse
import logging
import sys
import os
import re

class NucMerHit(object):
  def __init__(self):
    self.start1 = None
    self.end1 = None
    self.start2 = None
    self.end2 = None
    self.length1 = None
    self.length2 = None
    self.identity = None
    self.id1 = None
    self.id2 = None


class NucMerParser:
    """Wrapper class for parsing nucmer output"""

    def __init__(self, fp):
      self.fp = fp

    def __iter__(self):
        """Iterate through a nucmer coords file, yielding a NucMerHit object each time"""
        # strip out the header
        prepped = False
        for l in fp: # search for the first record
            if l[0] == '=': # next line is good
                prepped = True
                break

        if not prepped: raise Exception("nucmer parsing error, unable to find header line")

        # file should be prepped now
        for l in fp:
            fields = re.compile(' *(?:\| +)?').split(l.strip())
            #print fields

            #import code; code.interact(local=locals())
            hit = NucMerHit()
            i=0

            # constants to make the code more readable
            # _START_1  = 0
            # _END_1    = 1
            # _START_2  = 2
            # _END_2    = 3
            # _LEN_1    = 4
            # _LEN_2    = 5
            # _IDENTITY = 6
            # _ID_1     = 7
            # _ID_2     = 8

            hit.start1 = int(fields[i]); i+=1
            hit.end1 = int(fields[i]); i+=1
            hit.start2 = int(fields[i]); i+=1
            hit.end2 = int(fields[i]); i+=1
            hit.length1 = int(fields[i]); i+=1
            hit.length2 = int(fields[i]); i+=1
            hit.identity = float(fields[i]); i+=1
            ids_split = fields[i].split("\t")
            hit.id1 = ids_split[0]
            hit.id2 = ids_split[1]

            yield hit


parser = argparse.ArgumentParser(description='''Takes a nucmer .coords file, and matches query contigs to reference sequences''')
parser.add_argument('--coords', help = '.coords file generated by nucmer, with concatentated reference files as a problem', required = True)
#parser.add_argument('--references', help = 'a list of files corresponding to each reference', required = True)

options = parser.parse_args()

logging.basicConfig(level=logging.DEBUG)


# Monkey patch a dodgey method in
def simpleScore(self): return (self.identity * self.length1)
NucMerHit.simpleScore = simpleScore

# Get the best hit for each
best_hits = {}
with open(options.coords) as fp:
  for hit in NucMerParser(fp):
    if hit.length1 < 1000 or hit.id1 < 0.95: continue #completely ignore bad hits

    hit_id = hit.id2

    try:
      prev_hit = best_hits[hit_id]
      if prev_hit.simpleScore() < hit.simpleScore():
        best_hits[hit_id] = hit

    except KeyError:
      best_hits[hit_id] = hit


# Print out the best hits
for iD, hit in best_hits.items():
  genome_number = hit.id1.split('_')[0]
  print "\t".join((
    genome_number,
    hit.id2,
    str(hit.identity),
    str(hit.length1),
  ))
